/*
	I.MỘT VÀI QUY TẮC ĐẶT TÊN
		1.MÃ ID
		-- MÃ ID CÁC ĐỐI TƯỞNG LIÊN QUAN ĐẾN NGƯỜI LÀ CHUỖI GỒM 8 KÝ TỰ
				++ VỚI ID CỦA GIÁO VIÊN:
					GỒM 2 CHỮ CÁI IN HOA THEO SAU BỞI 6 CHỮ SỐ
					2 KÝ TỰ ĐẦU 2 LÀ 1 TRONG CÁC CHUỖI SAU ('AD','MI','TC')
					VD: TC0001234
				++ VỚI ID CỦA HỌC SINH:
					GỒM 8 CHỮ SỐ BẮT ĐẦU VỚI 4 CHỮ SỐ ĐÁNH DẤU NĂM NHẬP HỌC THEO SAU LÀ 4 CHỮ SỐ.
					VÍ DỤ: 20001234

			-- MÃ ID CÁC ĐỐI TƯỢNG KHÔNG LIÊN QUAN ĐẾN NGƯỜI LÀ CHUỖI GỒM 6 KÝ TỰ
				++ VỚI MÔN HỌC:
					MÃ ID GỒM 3 CHỮ CÁI HOA ĐẦU TRONG TÊN MÔN HỌC THEO SAU BỞI 3 CHỮ SỐ(0-9) VÍ DỤ 1 MÃ  MÔN TOÁN SẼ CÓ DẠNG MAT123.
					2 KÝ TỰ ĐẦU PHẢI THUỘC ('MAT','LIT','FOR','HIS','PHY','CHE','ART','INF')
		2.THÔNG TIN GIÁO VIÊN
			--MAIL: PHẢI LÀ GMAIL
			--POSITION PHẢI LÀ 1 TRONG CÁC CHUỖI ('TEACHER','ADMIN','MINISTRY')
		3.THÔNG TIN TÀI KHOẢN
			-- MỖI TÀI KHOẢN PHẢI ĐƯỢC SỞ HỮU BỞI 1 GIÁO VIÊN.
			-- TÀI KHOẢN ĐĂNG NHẬP SỬ DỤNG MÃ ID GIÁO VIÊN NHƯ TÊN ĐĂNG NHẬP.
			-- PASSWORD LÀ MỘT CHUỖI 32 KÝ TỰ ĐƯỢC MÃ HÓA THEO DẠNG MD5.
		4. CLASS
			-- MÃ LỚP LÀ 1 CHUỖI 5 KÝ TỰ BẮT ĐẦU BẰNG 2 CHỮ SỐ ĐÁNH DẤU LỚP KÍ TỰ TIẾP THEO CHỈ LOẠI LỚP 2 KÍ TỰ CUỐI CÙNG LÀ SỐ THỨ TỰ CỦA LỚP
				VÍ DỤ: 12A01 CHỈ LỚP 12 - CHUYÊN TỰ NHIÊN - LỚP THỨ 1.
		5. TEACHING
			MÃ GIẢNG DẠY ID LÀ MỘT CHUỔI 6 KÝ TỰ BẮT DẦU BẰNG CHUỖI 'TG' + 2 CHỮ SỐ CUỐI CỦA NĂM HỌC + 2 CHỮ SỐ HỌC KỲ 
			VÍ DỤ: TG2001 - PHÂN CÔNG GIÁO VIEN DẠY NĂM HỌC 2020 HỌC KÌ 01
		
		P/S01: TRÊN ĐÂY LÀ 1 SỐ  QUY TẮC ĐẶT TÊN CƠ BẢN NẾU KHÔNG CÓ Ý KIÊN SẼ ĐƯỢC ADD VÀO RẰNG BUỘC TOÀN VẸN CỦA DỮ LIỆU
			MỌI NGƯỜI THAM KHẢO VẢ CHO Ý KIẾN
		P/S02:	SẼ BỔ SUNG TIẾP TRONG QUÁ TRÌNH LÀM
			
*/



CREATE DATABASE 
TutteeFrame 
GO

USE 
TutteeFrame 
GO

CREATE TABLE SUBJECT
(
	SubjectID VARCHAR(6) NOT NULL PRIMARY KEY,
	SubjectName NVARCHAR(100) NOT NULL,
);
GO

CREATE TABLE TEACHER
(
	TeacherID VARCHAR(8) NOT NULL PRIMARY KEY,
	Surname NVARCHAR(20) NOT NULL,
	Firstname NVARCHAR(20) NOT NULL,
	TeacherImage IMAGE,
	DateBorn DateTime,
	Sex BIT NOT NULL DEFAULT 1,
	Address NVARCHAR(1000) NOT NULL,
	Phone VARCHAR(12) NOT NULL,
	Maill VARCHAR(50) NOT NULL,
	SubjectID VARCHAR(6) NOT NULL REFERENCES SUBJECT(SubjectID),
	IsMinistry BIT NOT NULL DEFAULT 0,
	IsAdmin BIT NOT NULL DEFAULT 0,
	Posittion NVARCHAR(50)
);
GO

CREATE TABLE ACCOUNT
(
	AccountID VARCHAR(12) NOT NULL PRIMARY KEY,
	TeacherID VARCHAR(8) REFERENCES TEACHER(TeacherID) ON DELETE CASCADE,
	Password VARCHAR(1000) NOT NULL,
);
GO

CREATE TABLE CLASS
(
	ClassID VARCHAR(5) NOT NULL PRIMARY KEY,
	RoomNum VARCHAR(5) NOT NULL,
	StudentNum TINYINT NOT NULL DEFAULT 0,
	TeacherID VARCHAR(8) REFERENCES TEACHER(TeacherID),
);
GO
CREATE TABLE  TEACHING
(
	TeachingID INT NOT NULL PRIMARY KEY,
	ClassID VARCHAR(5) NOT NULL REFERENCES CLASS(ClassID) ON DELETE CASCADE,
	SubjectID VARCHAR(6) NOT NULL REFERENCES SUBJECT(SubjectID) ON DELETE CASCADE,
	TeacherID VARCHAR(8) REFERENCES TEACHER(TeacherID) ON DELETE CASCADE,
	Semester	INT NOT NULL DEFAULT 1,
	Schoolyear INT NOT NULL DEFAULT YEAR(GETDATE()),
	Editable BIT NOT NULL DEFAULT 1,

);
GO
CREATE TABLE SCOREBOARD
(
	ScoreBoardID VARCHAR(8) PRIMARY KEY,
	StudentID VARCHAR(8) NOT NULL REFERENCES  STUDENT(StudentID) ON DELETE CASCADE,
	Semester INT NOT NULL DEFAULT 1,
	SemesterAverage FLOAT,
);
GO
CREATE TABLE SUBJECTSCORE
(
	SubjectScoreID VARCHAR(10) NOT NULL PRIMARY KEY,
	ScoreBoardID VARCHAR(8) NOT NULL REFERENCES SCOREBOARD(ScoreBoardID) ON DELETE CASCADE,
	SubjectID VARCHAR(6) NOT NULL REFERENCES SUBJECT(SubjectID) ON DELETE CASCADE,
	Quiz FLOAT,
	_15MinuteS01 FLOAT,
	_15MinuteS02 FLOAT,
	_15MinuteS03 FLOAT,
	_45MinuteS01 FLOAT,
	_45MinuteS02 FLOAT,
	_45minuteS03 FLOAT,
	Final FLOAT,
	SubjectAverage FLOAT,
);
GO

CREATE TABLE LEARNRESULT
(
	LearnResultID VARCHAR(10) PRIMARY KEY,
	StudentID VARCHAR(8) NOT NULL REFERENCES STUDENT(StudentID) ON DELETE CASCADE,
	ScoreBoardSE01ID VARCHAR(8) REFERENCES SCOREBOARD(ScoreBoardID),
	ScoreBoardSE02ID VARCHAR(8) REFERENCES SCOREBOARD(ScoreBoardID),
	Grade VARCHAR(2),
	ConductSE01 NVARCHAR(10),
	ConductSE02 NVARCHAR(10),
	YearConduct NVARCHAR(10),
	Year INT NOT NULL DEFAULT YEAR(GETDATE()),
	AverageScore FLOAT,
);
GO

CREATE TABLE STUDENT
(
	StudentID VARCHAR(8) NOT NULL PRIMARY KEY,
	Surname NVARCHAR(20) NOT NULL,
	Firstname NVARCHAR(20) NOT NULL,
	StudentImage IMAGE,
	DateBorn DateTime,
	Sex BIT NOT NULL DEFAULT 1,
	Address NVARCHAR(100) NOT NULL,
	Phonne VARCHAR(12) NOT NULL,
	ClassID VARCHAR(5) NOT NULL REFERENCES CLASS(ClassID),
	Status BIT NOT NULL DEFAULT 1,
);
GO

CREATE TABLE PUNISHMENT
(
	PunishmentID VARCHAR(8) PRIMARY KEY,
	StudentID VARCHAR(8) REFERENCES STUDENT(StudentID) ON DELETE CASCADE,
	Content NTEXT,
	Fault NTEXT NOT NULL,
	Grade VARCHAR(2),
	Semester INT DEFAULT 1,
	Year INT DEFAULT YEAR(GETDATE())
);
GO
CREATE TABLE REWARD
(
	RewardID VARCHAR(8) NOT NULL PRIMARY KEY,
	StudentID VARCHAR(8) NOT NULL REFERENCES STUDENT(StudentID) ON DELETE CASCADE,
	RewardName NTEXT NOT NULL,
	Content NTEXT,
	Grade VARCHAR(2),
	Semester INT  NOT NULL DEFAULT 1,
	Year INT NOT NULL DEFAULT YEAR(GETDATE()),
);
GO
CREATE TABLE SCHEDULES
(
	SchedulesID VARCHAR(6) PRIMARY KEY,
	ClassID VARCHAR(5) REFERENCES CLASS(ClassID),
	Semester tinyint DEFAULT 1,
	Year tinyint DEFAULT YEAR(GETDATE())
);
GO

CREATE TABLE SCHEDULE
(
	ID VARCHAR(6) PRIMARY KEY,
	SubjectID VARCHAR(6) REFERENCES SUBJECT(SubjectID),
	TimeBegin DATETIME,
	TimeEnd DATETIME,
	SchedulesID VARCHAR(6) REFERENCES SCHEDULES(SchedulesID),
);
GO

CREATE TRIGGER UPDATE_TOTAL_NUMBER_STUDENT_OF_CLASS ON STUDENT
AFTER INSERT
AS

	
	SET NOCOUNT ON
	--
	UPDATE CLASS
	SET StudentNum = StudentNum + s.dem
	FROM CLASS p JOIN (SELECT ClassID, COUNT(*) AS dem FROM inserted GROUP BY ClassID ) s
	ON P.ClassID  = s.ClassID
GO

CREATE TRIGGER UPDATE_TOTAL_NUMBER_STUDENT_OF_CLASS_FOR_DELETE ON STUDENT
AFTER DELETE
AS
	SET NOCOUNT ON
	UPDATE CLASS
	SET StudentNum = StudentNum - s.dem
	FROM CLASS p JOIN (SELECT ClassID, COUNT(*) AS dem FROM deleted GROUP BY ClassID ) s
	ON p.ClassID  = s.ClassID
GO


CREATE TRIGGER UPDATE_SEMESTER_SCORE ON SUBJECTSCORE
FOR UPDATE
AS
BEGIN
	DECLARE @SoMon TINYINT, @SoMonCoDiem TINYINT, @TongDiem FLOAT, @MaBangDiem VARCHAR(8)
	SELECT @MaBangDiem = inserted.ScoreBoardID FROM inserted
	SELECT @SoMon = COUNT(*) FROM [SUBJECT]
	SELECT @SoMonCoDiem = COUNT(*) FROM SUBJECTSCORE WHERE ScoreBoardID = @MaBangDiem AND SubjectAverage IS NOT NULL
	IF (@SoMonCoDiem = @SoMon)
	BEGIN
		SELECT @TongDiem = SUM(SubjectAverage) FROM SUBJECTSCORE WHERE ScoreBoardID = @MaBangDiem GROUP BY ScoreBoardID
		UPDATE SCOREBOARD SET SemesterAverage = @TongDiem / @SoMonCoDiem WHERE ScoreBoardID = @MaBangDiem
	END
	ELSE
		UPDATE SCOREBOARD SET SemesterAverage = NULL WHERE ScoreBoardID = @MaBangDiem
END
GO

CREATE TRIGGER UPDATE_YEAR_SCORE ON SCOREBOARD
FOR UPDATE
AS
BEGIN
	DECLARE @MaBangDiem VARCHAR(8), @LearnID VARCHAR(10), @Board1 VARCHAR(8), @Board2 VARCHAR(8), @SoHK_CoDiem TINYINT, @TongDiem FLOAT
	SELECT @MaBangDiem = inserted.ScoreBoardID FROM inserted
	SELECT @LearnID = LEARNRESULT.LearnResultID, @Board1 = LEARNRESULT.ScoreBoardSE01ID, @Board2 = LEARNRESULT.ScoreBoardSE02ID
	FROM LEARNRESULT WHERE LEARNRESULT.ScoreBoardSE01ID = @MaBangDiem OR LEARNRESULT.ScoreBoardSE02ID = @MaBangDiem
	SELECT @SoHK_CoDiem = COUNT(*)
	FROM SCOREBOARD WHERE (ScoreBoardID = @Board1 OR ScoreBoardID = @Board2) AND SemesterAverage IS NOT NULL
	IF (@SoHK_CoDiem = 2)
	BEGIN
		SELECT @TongDiem = SUM(SemesterAverage) FROM SCOREBOARD WHERE (ScoreBoardID = @Board1 OR ScoreBoardID = @Board2)
		UPDATE LEARNRESULT SET AverageScore = @TongDiem /2 WHERE LearnResultID = @LearnID
	END
	ELSE
		UPDATE LEARNRESULT SET AverageScore = NULL WHERE LearnResultID = @LearnID
END
GO